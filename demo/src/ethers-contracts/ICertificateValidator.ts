/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ICertificateValidatorInterface extends utils.Interface {
  functions: {
    "isCertificateSigner(address)": FunctionFragment;
    "addCertificateSigner(address)": FunctionFragment;
    "removeCertificateSigner(address)": FunctionFragment;
    "usedCertificateNonce(address)": FunctionFragment;
    "usedCertificateSalt(bytes32)": FunctionFragment;
    "getValidationMode()": FunctionFragment;
    "setValidationMode(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isCertificateSigner"
      | "addCertificateSigner"
      | "removeCertificateSigner"
      | "usedCertificateNonce"
      | "usedCertificateSalt"
      | "getValidationMode"
      | "setValidationMode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isCertificateSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addCertificateSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCertificateSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedCertificateNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedCertificateSalt",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidationMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setValidationMode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "isCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedCertificateNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedCertificateSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidationMode",
    data: BytesLike
  ): Result;

  events: {
    "CertificateSignerAdded(address)": EventFragment;
    "CertificateSignerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CertificateSignerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CertificateSignerRemoved"): EventFragment;
}

export interface CertificateSignerAddedEventObject {
  account: string;
}
export type CertificateSignerAddedEvent = TypedEvent<
  [string],
  CertificateSignerAddedEventObject
>;

export type CertificateSignerAddedEventFilter =
  TypedEventFilter<CertificateSignerAddedEvent>;

export interface CertificateSignerRemovedEventObject {
  account: string;
}
export type CertificateSignerRemovedEvent = TypedEvent<
  [string],
  CertificateSignerRemovedEventObject
>;

export type CertificateSignerRemovedEventFilter =
  TypedEventFilter<CertificateSignerRemovedEvent>;

export interface ICertificateValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICertificateValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedCertificateNonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usedCertificateSalt(
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getValidationMode(overrides?: CallOverrides): Promise<[number]>;

    setValidationMode(
      mode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  isCertificateSigner(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addCertificateSigner(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCertificateSigner(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedCertificateNonce(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  usedCertificateSalt(
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getValidationMode(overrides?: CallOverrides): Promise<number>;

  setValidationMode(
    mode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedCertificateNonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usedCertificateSalt(
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getValidationMode(overrides?: CallOverrides): Promise<number>;

    setValidationMode(
      mode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CertificateSignerAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): CertificateSignerAddedEventFilter;
    CertificateSignerAdded(
      account?: PromiseOrValue<string> | null
    ): CertificateSignerAddedEventFilter;

    "CertificateSignerRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): CertificateSignerRemovedEventFilter;
    CertificateSignerRemoved(
      account?: PromiseOrValue<string> | null
    ): CertificateSignerRemovedEventFilter;
  };

  estimateGas: {
    isCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedCertificateNonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usedCertificateSalt(
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidationMode(overrides?: CallOverrides): Promise<BigNumber>;

    setValidationMode(
      mode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCertificateSigner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedCertificateNonce(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usedCertificateSalt(
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidationMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setValidationMode(
      mode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
