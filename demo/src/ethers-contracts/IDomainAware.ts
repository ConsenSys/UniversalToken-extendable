/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IDomainAwareInterface extends utils.Interface {
  functions: {
    "domainName()": FunctionFragment;
    "domainVersion()": FunctionFragment;
    "generateDomainSeparator()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "domainName"
      | "domainVersion"
      | "generateDomainSeparator"
      | "domainSeparator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "domainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "domainName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDomainAware extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDomainAwareInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Uses _domainName()
     * The domain name for this contract used in the domain seperator. This value will not change and will have a length greater than 0.
     */
    domainName(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The current version for this contract. Changing this value will cause the domain separator to update and trigger a cache update.
     */
    domainVersion(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Generate the domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id. This call bypasses the stored cache and will always represent the current domain seperator for this Contract's name + version + chain id.
     */
    generateDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    /**
     * This call is cached by the chain-id and contract version. If these two values do not change then the cached domain seperator hash is returned. If these two values do change, then a new hash is generated and the cache is updated
     * Get the current domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id.
     */
    domainSeparator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Uses _domainName()
   * The domain name for this contract used in the domain seperator. This value will not change and will have a length greater than 0.
   */
  domainName(overrides?: CallOverrides): Promise<string>;

  /**
   * The current version for this contract. Changing this value will cause the domain separator to update and trigger a cache update.
   */
  domainVersion(overrides?: CallOverrides): Promise<string>;

  /**
   * Generate the domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id. This call bypasses the stored cache and will always represent the current domain seperator for this Contract's name + version + chain id.
   */
  generateDomainSeparator(overrides?: CallOverrides): Promise<string>;

  /**
   * This call is cached by the chain-id and contract version. If these two values do not change then the cached domain seperator hash is returned. If these two values do change, then a new hash is generated and the cache is updated
   * Get the current domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id.
   */
  domainSeparator(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Uses _domainName()
     * The domain name for this contract used in the domain seperator. This value will not change and will have a length greater than 0.
     */
    domainName(overrides?: CallOverrides): Promise<string>;

    /**
     * The current version for this contract. Changing this value will cause the domain separator to update and trigger a cache update.
     */
    domainVersion(overrides?: CallOverrides): Promise<string>;

    /**
     * Generate the domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id. This call bypasses the stored cache and will always represent the current domain seperator for this Contract's name + version + chain id.
     */
    generateDomainSeparator(overrides?: CallOverrides): Promise<string>;

    /**
     * This call is cached by the chain-id and contract version. If these two values do not change then the cached domain seperator hash is returned. If these two values do change, then a new hash is generated and the cache is updated
     * Get the current domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id.
     */
    domainSeparator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Uses _domainName()
     * The domain name for this contract used in the domain seperator. This value will not change and will have a length greater than 0.
     */
    domainName(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The current version for this contract. Changing this value will cause the domain separator to update and trigger a cache update.
     */
    domainVersion(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Generate the domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id. This call bypasses the stored cache and will always represent the current domain seperator for this Contract's name + version + chain id.
     */
    generateDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This call is cached by the chain-id and contract version. If these two values do not change then the cached domain seperator hash is returned. If these two values do change, then a new hash is generated and the cache is updated
     * Get the current domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id.
     */
    domainSeparator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Uses _domainName()
     * The domain name for this contract used in the domain seperator. This value will not change and will have a length greater than 0.
     */
    domainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The current version for this contract. Changing this value will cause the domain separator to update and trigger a cache update.
     */
    domainVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Generate the domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id. This call bypasses the stored cache and will always represent the current domain seperator for this Contract's name + version + chain id.
     */
    generateDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This call is cached by the chain-id and contract version. If these two values do not change then the cached domain seperator hash is returned. If these two values do change, then a new hash is generated and the cache is updated
     * Get the current domain seperator hash for this contract using the contract's domain name, current domain version and the current chain-id.
     */
    domainSeparator(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
