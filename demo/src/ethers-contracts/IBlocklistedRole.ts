/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IBlocklistedRoleInterface extends utils.Interface {
  functions: {
    "isBlocklisted(address)": FunctionFragment;
    "addBlocklisted(address)": FunctionFragment;
    "removeBlocklisted(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isBlocklisted"
      | "addBlocklisted"
      | "removeBlocklisted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isBlocklisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlocklisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklisted",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "isBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklisted",
    data: BytesLike
  ): Result;

  events: {
    "BlocklistedAdded(address)": EventFragment;
    "BlocklistedRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlocklistedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocklistedRemoved"): EventFragment;
}

export interface BlocklistedAddedEventObject {
  account: string;
}
export type BlocklistedAddedEvent = TypedEvent<
  [string],
  BlocklistedAddedEventObject
>;

export type BlocklistedAddedEventFilter =
  TypedEventFilter<BlocklistedAddedEvent>;

export interface BlocklistedRemovedEventObject {
  account: string;
}
export type BlocklistedRemovedEvent = TypedEvent<
  [string],
  BlocklistedRemovedEventObject
>;

export type BlocklistedRemovedEventFilter =
  TypedEventFilter<BlocklistedRemovedEvent>;

export interface IBlocklistedRole extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBlocklistedRoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  isBlocklisted(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addBlocklisted(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBlocklisted(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlocklistedAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): BlocklistedAddedEventFilter;
    BlocklistedAdded(
      account?: PromiseOrValue<string> | null
    ): BlocklistedAddedEventFilter;

    "BlocklistedRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): BlocklistedRemovedEventFilter;
    BlocklistedRemoved(
      account?: PromiseOrValue<string> | null
    ): BlocklistedRemovedEventFilter;
  };

  estimateGas: {
    isBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBlocklisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
