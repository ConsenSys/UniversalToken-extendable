/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type TransferDataStruct = {
  token: PromiseOrValue<string>;
  payload: PromiseOrValue<BytesLike>;
  partition: PromiseOrValue<BytesLike>;
  operator: PromiseOrValue<string>;
  from: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  tokenId: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
  operatorData: PromiseOrValue<BytesLike>;
};

export type TransferDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  token: string;
  payload: string;
  partition: string;
  operator: string;
  from: string;
  to: string;
  value: BigNumber;
  tokenId: BigNumber;
  data: string;
  operatorData: string;
};

export interface MockAllowExtensionInterface extends utils.Interface {
  functions: {
    "addAllowlisted(address)": FunctionFragment;
    "addAllowlistedAdmin(address)": FunctionFragment;
    "extensionDeployer()": FunctionFragment;
    "externalFunctions()": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "interfaceLabel()": FunctionFragment;
    "isAllowlisted(address)": FunctionFragment;
    "isAllowlistedAdmin(address)": FunctionFragment;
    "isTokenStandardSupported(uint8)": FunctionFragment;
    "onTransferExecuted((address,bytes,bytes32,address,address,address,uint256,uint256,bytes,bytes))": FunctionFragment;
    "packageHash()": FunctionFragment;
    "removeAllowlisted(address)": FunctionFragment;
    "removeAllowlistedAdmin(address)": FunctionFragment;
    "requiredRoles()": FunctionFragment;
    "version()": FunctionFragment;
    "mockUpgradeTest()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAllowlisted"
      | "addAllowlistedAdmin"
      | "extensionDeployer"
      | "externalFunctions"
      | "hasRole"
      | "initialize"
      | "interfaceLabel"
      | "isAllowlisted"
      | "isAllowlistedAdmin"
      | "isTokenStandardSupported"
      | "onTransferExecuted"
      | "packageHash"
      | "removeAllowlisted"
      | "removeAllowlistedAdmin"
      | "requiredRoles"
      | "version"
      | "mockUpgradeTest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAllowlisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowlistedAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "extensionDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interfaceLabel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowlisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowlistedAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenStandardSupported",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransferExecuted",
    values: [TransferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "packageHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowlisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowlistedAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredRoles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mockUpgradeTest",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowlistedAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extensionDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interfaceLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowlistedAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenStandardSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTransferExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowlistedAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockUpgradeTest",
    data: BytesLike
  ): Result;

  events: {
    "AllowlistedAdded(address)": EventFragment;
    "AllowlistedAdminAdded(address)": EventFragment;
    "AllowlistedAdminRemoved(address)": EventFragment;
    "AllowlistedRemoved(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdded(address,bytes32)": EventFragment;
    "RoleRemoved(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowlistedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowlistedAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowlistedAdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowlistedRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
}

export interface AllowlistedAddedEventObject {
  account: string;
}
export type AllowlistedAddedEvent = TypedEvent<
  [string],
  AllowlistedAddedEventObject
>;

export type AllowlistedAddedEventFilter =
  TypedEventFilter<AllowlistedAddedEvent>;

export interface AllowlistedAdminAddedEventObject {
  account: string;
}
export type AllowlistedAdminAddedEvent = TypedEvent<
  [string],
  AllowlistedAdminAddedEventObject
>;

export type AllowlistedAdminAddedEventFilter =
  TypedEventFilter<AllowlistedAdminAddedEvent>;

export interface AllowlistedAdminRemovedEventObject {
  account: string;
}
export type AllowlistedAdminRemovedEvent = TypedEvent<
  [string],
  AllowlistedAdminRemovedEventObject
>;

export type AllowlistedAdminRemovedEventFilter =
  TypedEventFilter<AllowlistedAdminRemovedEvent>;

export interface AllowlistedRemovedEventObject {
  account: string;
}
export type AllowlistedRemovedEvent = TypedEvent<
  [string],
  AllowlistedRemovedEventObject
>;

export type AllowlistedRemovedEventFilter =
  TypedEventFilter<AllowlistedRemovedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAddedEventObject {
  caller: string;
  roleId: string;
}
export type RoleAddedEvent = TypedEvent<[string, string], RoleAddedEventObject>;

export type RoleAddedEventFilter = TypedEventFilter<RoleAddedEvent>;

export interface RoleRemovedEventObject {
  caller: string;
  roleId: string;
}
export type RoleRemovedEvent = TypedEvent<
  [string, string],
  RoleRemovedEventObject
>;

export type RoleRemovedEventFilter = TypedEventFilter<RoleRemovedEvent>;

export interface MockAllowExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockAllowExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<[string[]]>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<[string]>;

    isAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<[string]>;

    removeAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockUpgradeTest(overrides?: CallOverrides): Promise<[string]>;
  };

  addAllowlisted(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAllowlistedAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the extension deployer address
   */
  extensionDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
   * An array of function signatures registered by the extension
   */
  externalFunctions(overrides?: CallOverrides): Promise<string[]>;

  hasRole(
    caller: PromiseOrValue<string>,
    roleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * This function is invoked when the Extension is registered with a TokenProxy
   * This function cannot be invoked directly
   */
  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
   */
  interfaceLabel(overrides?: CallOverrides): Promise<string>;

  isAllowlisted(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowlistedAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks if token standard is supported by the extension
   * @param standard a valid TokenStandard (enum)
   */
  isTokenStandardSupported(
    standard: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onTransferExecuted(
    data: TransferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the package hash (generated using the package name and deployer address)
   */
  packageHash(overrides?: CallOverrides): Promise<string>;

  removeAllowlisted(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAllowlistedAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the list of required roles required to call the extension
   */
  requiredRoles(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the package version
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  mockUpgradeTest(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<string[]>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<string>;

    isAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<string>;

    removeAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    mockUpgradeTest(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AllowlistedAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): AllowlistedAddedEventFilter;
    AllowlistedAdded(
      account?: PromiseOrValue<string> | null
    ): AllowlistedAddedEventFilter;

    "AllowlistedAdminAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): AllowlistedAdminAddedEventFilter;
    AllowlistedAdminAdded(
      account?: PromiseOrValue<string> | null
    ): AllowlistedAdminAddedEventFilter;

    "AllowlistedAdminRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): AllowlistedAdminRemovedEventFilter;
    AllowlistedAdminRemoved(
      account?: PromiseOrValue<string> | null
    ): AllowlistedAdminRemovedEventFilter;

    "AllowlistedRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): AllowlistedRemovedEventFilter;
    AllowlistedRemoved(
      account?: PromiseOrValue<string> | null
    ): AllowlistedRemovedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdded(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleAddedEventFilter;
    RoleAdded(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleAddedEventFilter;

    "RoleRemoved(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleRemovedEventFilter;
    RoleRemoved(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleRemovedEventFilter;
  };

  estimateGas: {
    addAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<BigNumber>;

    removeAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    mockUpgradeTest(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAllowlisted(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAllowlistedAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockUpgradeTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
