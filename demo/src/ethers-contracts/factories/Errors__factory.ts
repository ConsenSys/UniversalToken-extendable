/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Errors, ErrorsInterface } from "../Errors";

const _abi = [
  {
    inputs: [],
    name: "NO_CONTRACT_OWNER",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_ALLOWANCE_NOT_GIVEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_BEFORE_SETTLEMENT_DATE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_COMPETITION_ON_PRICE_OWNERSHIP",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_ETH_AMOUNT_INCORRECT",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_ETH_TRADE_REQUIRES_ESCROW",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_EXECUTE_TRADE_POSSIBLE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_FORCE_TRADE_NOT_POSSIBLE_NO_TOKENS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_HOLD_DOESNT_EXIST",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_HOLD_TOKEN_EXTENSION_MISSING",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_NO_HOLDID_GIVEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_NO_PRICE_OWNERSHIP",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_ONLY_EXECUTER_CAN_FORCE_TRADE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_ONLY_REGISTERED_HOLDERS",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_PRICE_HIGHER_THAN_AMOUNT",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_PRICE_SETTER_NOT_TOKEN_ORACLE_1",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_PRICE_SETTER_NOT_TOKEN_ORACLE_2",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_CANT_CANCEL_TRADE_0",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_CANT_CANCEL_TRADE_1",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_CANT_CANCEL_TRADE_2",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_CANT_CANCEL_TRADE_3",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_CANT_FORCE_TRADE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_NOT_EXECUTER",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_NOT_PRICE_ORACLE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_SENDER_NOT_TOKEN_CONTROLLER",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_START_DATE_MUST_BE_ONE_WEEK_BEFORE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TOKENS_IN_WRONG_PARTITION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TOKEN_AMOUNT_INCORRECT",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TOKEN_INCORRECT_STANDARD",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TOKEN_STANDARD_NOT_SUPPORTED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TRADE_ALREADY_ACCEPTED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TRADE_EXECUTER_NOT_ALLOWED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TRADE_EXPIRED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TRADE_NOT_FULLY_ACCEPTED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TRADE_NOT_FULLY_APPROVED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_TRADE_NOT_PENDING",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SW_WRONG_TOKEN_SENT",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TR_INVALID_RECEIVER",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TR_SENDER_NOT_ERC1400_TOKEN",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TR_TO_ADDRESS_NOT_ME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_ADDRESS_NOT_ALLOWED",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61084361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061025d5760003560e01c80635ee144da11610150578063951798ce116100cd578063b6df50af11610091578063b6df50af146106f4578063ba7de0ff14610715578063c22d80ca14610736578063f2ea3cb414610756578063f4cb5f4414610776578063f781191e1461079757600080fd5b8063951798ce1461064f5780639597916614610670578063b00b900314610691578063b3259cf4146106b2578063b6761e29146106d357600080fd5b80636de73348116101145780636de73348146105aa5780636fe7b737146105cb5780637a44b09f146105ec5780637b6cb0bc1461060d57806393f8a1411461062e57600080fd5b80635ee144da146105085780635f761e3b1461052957806367be44fc146105495780636c1a80a01461056a5780636c98d15e1461058a57600080fd5b806325d91df3116101de5780634f15e2b8116101a25780634f15e2b81461046457806352d105ef1461048557806353a3c7a2146104a557806354f9444a146104c6578063596d9fb1146104e757600080fd5b806325d91df3146103c05780632b24b2c9146103e15780632f36f610146104025780633061a79b14610423578063371f893f1461044457600080fd5b8063195c70c611610225578063195c70c61461031b5780631a74942c1461033c5780631ad9631d1461035d5780631b1187051461037e5780631dcec9591461039f57600080fd5b80630397a1c514610262578063045a777a14610299578063046c177c146102ba5780630a3229d7146102da57806310e05151146102fb575b600080fd5b610283604051806040016040528060028152602001610c4d60f21b81525081565b60405161029091906107b8565b60405180910390f35b61028360405180604001604052806002815260200161333360f01b81525081565b610283604051806040016040528060018152602001601b60f91b81525081565b61028360405180604001604052806002815260200161333560f01b81525081565b610283604051806040016040528060018152602001601960f91b81525081565b610283604051806040016040528060028152602001610ccd60f21b81525081565b61028360405180604001604052806002815260200161333760f01b81525081565b61028360405180604001604052806002815260200161323960f01b81525081565b61028360405180604001604052806002815260200161313160f01b81525081565b61028360405180604001604052806002815260200161035360f41b81525081565b61028360405180604001604052806002815260200161033360f41b81525081565b61028360405180604001604052806002815260200161323360f01b81525081565b610283604051806040016040528060028152602001610c8d60f21b81525081565b61028360405180604001604052806002815260200161333160f01b81525081565b610283604051806040016040528060018152602001603560f81b81525081565b61028360405180604001604052806002815260200161353560f01b81525081565b610283604051806040016040528060018152602001603760f81b81525081565b61028360405180604001604052806002815260200161189b60f11b81525081565b61028360405180604001604052806002815260200161191b60f11b81525081565b61028360405180604001604052806002815260200161199b60f11b81525081565b61028360405180604001604052806002815260200161323160f01b81525081565b610283604051806040016040528060018152602001603360f81b81525081565b61028360405180604001604052806002815260200161064760f31b81525081565b610283604051806040016040528060018152602001600d60fa1b81525081565b610283604051806040016040528060018152602001600760fb1b81525081565b61028360405180604001604052806002815260200161199960f11b81525081565b61028360405180604001604052806002815260200161031360f41b81525081565b61028360405180604001604052806002815260200161191960f11b81525081565b61028360405180604001604052806002815260200161313560f01b81525081565b61028360405180604001604052806002815260200161313360f01b81525081565b61028360405180604001604052806002815260200161032360f41b81525081565b61028360405180604001604052806002815260200161189960f11b81525081565b61028360405180604001604052806002815260200161313960f01b81525081565b61028360405180604001604052806002815260200161323560f01b81525081565b61028360405180604001604052806002815260200161066760f31b81525081565b61028360405180604001604052806002815260200161062760f31b81525081565b61028360405180604001604052806002815260200161313760f01b81525081565b610283604051806040016040528060018152602001603960f81b81525081565b610283604051806040016040528060018152602001603160f81b81525081565b61028360405180604001604052806002815260200161323760f01b81525081565b61028360405180604001604052806002815260200161353760f01b81525081565b600060208083528351808285015260005b818110156107e5578581018301518582016040015282016107c9565b818111156107f7576000604083870101525b50601f01601f191692909201604001939250505056fea264697066735822122043a6d103c7086b5fc5946385849ca4d4722688ccef4b1eeb89c43819d27af5c964736f6c63430008070033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
