/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ExtensionProxyInterface extends utils.Interface {
  functions: {
    "upgradeTo(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "externalFunctions()": FunctionFragment;
    "requiredRoles()": FunctionFragment;
    "isTokenStandardSupported(uint8)": FunctionFragment;
    "extensionDeployer()": FunctionFragment;
    "packageHash()": FunctionFragment;
    "version()": FunctionFragment;
    "interfaceLabel()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "upgradeTo"
      | "initialize"
      | "externalFunctions"
      | "requiredRoles"
      | "isTokenStandardSupported"
      | "extensionDeployer"
      | "packageHash"
      | "version"
      | "interfaceLabel"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenStandardSupported",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extensionDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "packageHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interfaceLabel",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenStandardSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extensionDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interfaceLabel",
    data: BytesLike
  ): Result;

  events: {
    "ExtensionUpgraded(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface ExtensionUpgradedEventObject {
  extension: string;
  newExtension: string;
}
export type ExtensionUpgradedEvent = TypedEvent<
  [string, string],
  ExtensionUpgradedEventObject
>;

export type ExtensionUpgradedEventFilter =
  TypedEventFilter<ExtensionUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ExtensionProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExtensionProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Upgrade the ExtensionProxy logic contract. Can only be executed by the current admin of the extension address
     * Perform an upgrade on the proxy and replace the current logic contract with a new one. You must provide the new address of the logic contract.
     * @param extensionImplementation The address of the new logic contract
     */
    upgradeTo(
      extensionImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures this extension adds when registered with a TokenProxy
     */
    externalFunctions(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * This function is used by the TokenProxy to determine what roles to grant to the extension after registration and what roles to remove when removing the extension
     * An array of role IDs that this extension requires from the Token in order to function properly
     */
    requiredRoles(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Whether a given Token standard is supported by this Extension
     * @param standard The standard to check support for
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * The address that deployed this extension.
     */
    extensionDeployer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The hash of the package string this extension was deployed with
     */
    packageHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The version of this extension, represented as a number
     */
    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Upgrade the ExtensionProxy logic contract. Can only be executed by the current admin of the extension address
   * Perform an upgrade on the proxy and replace the current logic contract with a new one. You must provide the new address of the logic contract.
   * @param extensionImplementation The address of the new logic contract
   */
  upgradeTo(
    extensionImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function is invoked when the Extension is registered with a TokenProxy
   * This function cannot be invoked directly
   */
  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
   * An array of function signatures this extension adds when registered with a TokenProxy
   */
  externalFunctions(overrides?: CallOverrides): Promise<string[]>;

  /**
   * This function is used by the TokenProxy to determine what roles to grant to the extension after registration and what roles to remove when removing the extension
   * An array of role IDs that this extension requires from the Token in order to function properly
   */
  requiredRoles(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Whether a given Token standard is supported by this Extension
   * @param standard The standard to check support for
   */
  isTokenStandardSupported(
    standard: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * The address that deployed this extension.
   */
  extensionDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * The hash of the package string this extension was deployed with
   */
  packageHash(overrides?: CallOverrides): Promise<string>;

  /**
   * The version of this extension, represented as a number
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
   */
  interfaceLabel(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Upgrade the ExtensionProxy logic contract. Can only be executed by the current admin of the extension address
     * Perform an upgrade on the proxy and replace the current logic contract with a new one. You must provide the new address of the logic contract.
     * @param extensionImplementation The address of the new logic contract
     */
    upgradeTo(
      extensionImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures this extension adds when registered with a TokenProxy
     */
    externalFunctions(overrides?: CallOverrides): Promise<string[]>;

    /**
     * This function is used by the TokenProxy to determine what roles to grant to the extension after registration and what roles to remove when removing the extension
     * An array of role IDs that this extension requires from the Token in order to function properly
     */
    requiredRoles(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Whether a given Token standard is supported by this Extension
     * @param standard The standard to check support for
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * The address that deployed this extension.
     */
    extensionDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * The hash of the package string this extension was deployed with
     */
    packageHash(overrides?: CallOverrides): Promise<string>;

    /**
     * The version of this extension, represented as a number
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ExtensionUpgraded(address,address)"(
      extension?: PromiseOrValue<string> | null,
      newExtension?: PromiseOrValue<string> | null
    ): ExtensionUpgradedEventFilter;
    ExtensionUpgraded(
      extension?: PromiseOrValue<string> | null,
      newExtension?: PromiseOrValue<string> | null
    ): ExtensionUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    /**
     * Upgrade the ExtensionProxy logic contract. Can only be executed by the current admin of the extension address
     * Perform an upgrade on the proxy and replace the current logic contract with a new one. You must provide the new address of the logic contract.
     * @param extensionImplementation The address of the new logic contract
     */
    upgradeTo(
      extensionImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures this extension adds when registered with a TokenProxy
     */
    externalFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is used by the TokenProxy to determine what roles to grant to the extension after registration and what roles to remove when removing the extension
     * An array of role IDs that this extension requires from the Token in order to function properly
     */
    requiredRoles(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Whether a given Token standard is supported by this Extension
     * @param standard The standard to check support for
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The address that deployed this extension.
     */
    extensionDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The hash of the package string this extension was deployed with
     */
    packageHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The version of this extension, represented as a number
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Upgrade the ExtensionProxy logic contract. Can only be executed by the current admin of the extension address
     * Perform an upgrade on the proxy and replace the current logic contract with a new one. You must provide the new address of the logic contract.
     * @param extensionImplementation The address of the new logic contract
     */
    upgradeTo(
      extensionImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures this extension adds when registered with a TokenProxy
     */
    externalFunctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function is used by the TokenProxy to determine what roles to grant to the extension after registration and what roles to remove when removing the extension
     * An array of role IDs that this extension requires from the Token in order to function properly
     */
    requiredRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Whether a given Token standard is supported by this Extension
     * @param standard The standard to check support for
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The address that deployed this extension.
     */
    extensionDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The hash of the package string this extension was deployed with
     */
    packageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The version of this extension, represented as a number
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
