/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ERC20HoldDataStruct = {
  sender: PromiseOrValue<string>;
  recipient: PromiseOrValue<string>;
  notary: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  expirationDateTime: PromiseOrValue<BigNumberish>;
  secretHash: PromiseOrValue<BytesLike>;
  status: PromiseOrValue<BigNumberish>;
};

export type ERC20HoldDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  number
] & {
  sender: string;
  recipient: string;
  notary: string;
  amount: BigNumber;
  expirationDateTime: BigNumber;
  secretHash: string;
  status: number;
};

export type TransferDataStruct = {
  token: PromiseOrValue<string>;
  payload: PromiseOrValue<BytesLike>;
  partition: PromiseOrValue<BytesLike>;
  operator: PromiseOrValue<string>;
  from: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  tokenId: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
  operatorData: PromiseOrValue<BytesLike>;
};

export type TransferDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  token: string;
  payload: string;
  partition: string;
  operator: string;
  from: string;
  to: string;
  value: BigNumber;
  tokenId: BigNumber;
  data: string;
  operatorData: string;
};

export interface HoldExtensionInterface extends utils.Interface {
  functions: {
    "extensionDeployer()": FunctionFragment;
    "externalFunctions()": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "interfaceLabel()": FunctionFragment;
    "isTokenStandardSupported(uint8)": FunctionFragment;
    "packageHash()": FunctionFragment;
    "requiredRoles()": FunctionFragment;
    "version()": FunctionFragment;
    "initialize()": FunctionFragment;
    "generateHoldId(address,address,uint256,uint256,bytes32)": FunctionFragment;
    "retrieveHoldHashId(address,address,address,uint256)": FunctionFragment;
    "hold(bytes32,address,address,uint256,uint256,bytes32)": FunctionFragment;
    "retrieveHoldData(bytes32)": FunctionFragment;
    "executeHold(bytes32,bytes32)": FunctionFragment;
    "executeHold(bytes32,bytes32,address)": FunctionFragment;
    "executeHold(bytes32)": FunctionFragment;
    "releaseHold(bytes32)": FunctionFragment;
    "balanceOnHold(address)": FunctionFragment;
    "spendableBalanceOf(address)": FunctionFragment;
    "totalSupplyOnHold()": FunctionFragment;
    "holdStatus(bytes32)": FunctionFragment;
    "onTransferExecuted((address,bytes,bytes32,address,address,address,uint256,uint256,bytes,bytes))": FunctionFragment;
    "onApproveExecuted((address,bytes,bytes32,address,address,address,uint256,uint256,bytes,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "extensionDeployer"
      | "externalFunctions"
      | "hasRole"
      | "interfaceLabel"
      | "isTokenStandardSupported"
      | "packageHash"
      | "requiredRoles"
      | "version"
      | "initialize"
      | "generateHoldId"
      | "retrieveHoldHashId"
      | "hold"
      | "retrieveHoldData"
      | "executeHold(bytes32,bytes32)"
      | "executeHold(bytes32,bytes32,address)"
      | "executeHold(bytes32)"
      | "releaseHold"
      | "balanceOnHold"
      | "spendableBalanceOf"
      | "totalSupplyOnHold"
      | "holdStatus"
      | "onTransferExecuted"
      | "onApproveExecuted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "extensionDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "interfaceLabel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenStandardSupported",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "packageHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredRoles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateHoldId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldHashId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32,bytes32,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHold",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOnHold",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holdStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransferExecuted",
    values: [TransferDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onApproveExecuted",
    values: [TransferDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "extensionDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interfaceLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenStandardSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateHoldId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldHashId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTransferExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onApproveExecuted",
    data: BytesLike
  ): Result;

  events: {
    "ExecutedHold(bytes32,bytes32,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewHold(bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
    "ReleaseHold(bytes32,address)": EventFragment;
    "RoleAdded(address,bytes32)": EventFragment;
    "RoleRemoved(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutedHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
}

export interface ExecutedHoldEventObject {
  holdId: string;
  lockPreimage: string;
  recipient: string;
}
export type ExecutedHoldEvent = TypedEvent<
  [string, string, string],
  ExecutedHoldEventObject
>;

export type ExecutedHoldEventFilter = TypedEventFilter<ExecutedHoldEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewHoldEventObject {
  holdId: string;
  recipient: string;
  notary: string;
  amount: BigNumber;
  expirationDateTime: BigNumber;
  lockHash: string;
}
export type NewHoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  NewHoldEventObject
>;

export type NewHoldEventFilter = TypedEventFilter<NewHoldEvent>;

export interface ReleaseHoldEventObject {
  holdId: string;
  sender: string;
}
export type ReleaseHoldEvent = TypedEvent<
  [string, string],
  ReleaseHoldEventObject
>;

export type ReleaseHoldEventFilter = TypedEventFilter<ReleaseHoldEvent>;

export interface RoleAddedEventObject {
  caller: string;
  roleId: string;
}
export type RoleAddedEvent = TypedEvent<[string, string], RoleAddedEventObject>;

export type RoleAddedEventFilter = TypedEventFilter<RoleAddedEvent>;

export interface RoleRemovedEventObject {
  caller: string;
  roleId: string;
}
export type RoleRemovedEvent = TypedEvent<
  [string, string],
  RoleRemovedEventObject
>;

export type RoleRemovedEventFilter = TypedEventFilter<RoleRemovedEvent>;

export interface HoldExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HoldExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<[string[]]>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateHoldId(
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { holdId: string }>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ERC20HoldDataStructOutput]>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onApproveExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Gets the extension deployer address
   */
  extensionDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
   * An array of function signatures registered by the extension
   */
  externalFunctions(overrides?: CallOverrides): Promise<string[]>;

  hasRole(
    caller: PromiseOrValue<string>,
    roleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
   */
  interfaceLabel(overrides?: CallOverrides): Promise<string>;

  /**
   * Checks if token standard is supported by the extension
   * @param standard a valid TokenStandard (enum)
   */
  isTokenStandardSupported(
    standard: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Gets the package hash (generated using the package name and deployer address)
   */
  packageHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the list of required roles required to call the extension
   */
  requiredRoles(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the package version
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * This function is invoked when the Extension is registered with a TokenProxy
   * This function cannot be invoked directly
   */
  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateHoldId(
    recipient: PromiseOrValue<string>,
    notary: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expirationDateTime: PromiseOrValue<BigNumberish>,
    lockHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Retrieve hold hash, and ID for given parameters
   */
  retrieveHoldHashId(
    notary: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  /**
   * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
   * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
   * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
   * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
   * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
   * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
   */
  hold(
    holdId: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    notary: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expirationDateTime: PromiseOrValue<BigNumberish>,
    lockHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveHoldData(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ERC20HoldDataStructOutput>;

  /**
   * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
   * @param holdId a unique identifier for the hold.
   * @param lockPreimage the image used to generate the lock hash with a sha256 hash
   */
  "executeHold(bytes32,bytes32)"(
    holdId: PromiseOrValue<BytesLike>,
    lockPreimage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
   * @param holdId a unique identifier for the hold.
   * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
   * @param recipient the account the tokens will be transferred to on execution.
   */
  "executeHold(bytes32,bytes32,address)"(
    holdId: PromiseOrValue<BytesLike>,
    lockPreimage: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
   * @param holdId a unique identifier for the hold.
   */
  "executeHold(bytes32)"(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
   * @param holdId a unique identifier for the hold.
   */
  releaseHold(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Amount of tokens owned by an account that are held pending execution or release.
   * @param account owner of the tokens
   */
  balanceOnHold(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Total amount of tokens owned by an account including all the held tokens pending execution or release.
   * @param account owner of the tokens
   */
  spendableBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * @param holdId a unique identifier for the hold.
   */
  holdStatus(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  onTransferExecuted(
    data: TransferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onApproveExecuted(
    data: TransferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<string[]>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<string>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    generateHoldId(
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ERC20HoldDataStructOutput>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onApproveExecuted(
      data: TransferDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ExecutedHold(bytes32,bytes32,address)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;
    ExecutedHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewHold(bytes32,address,address,uint256,uint256,bytes32)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      notary?: PromiseOrValue<string> | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;
    NewHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      notary?: PromiseOrValue<string> | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;

    "ReleaseHold(bytes32,address)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      sender?: null
    ): ReleaseHoldEventFilter;
    ReleaseHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      sender?: null
    ): ReleaseHoldEventFilter;

    "RoleAdded(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleAddedEventFilter;
    RoleAdded(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleAddedEventFilter;

    "RoleRemoved(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleRemovedEventFilter;
    RoleRemoved(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleRemovedEventFilter;
  };

  estimateGas: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateHoldId(
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onApproveExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateHoldId(
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve hold hash, and ID for given parameters
     */
    retrieveHoldHashId(
      notary: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a sha256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onApproveExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
