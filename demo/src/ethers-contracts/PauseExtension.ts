/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type TransferDataStruct = {
  token: PromiseOrValue<string>;
  payload: PromiseOrValue<BytesLike>;
  partition: PromiseOrValue<BytesLike>;
  operator: PromiseOrValue<string>;
  from: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  tokenId: PromiseOrValue<BigNumberish>;
  data: PromiseOrValue<BytesLike>;
  operatorData: PromiseOrValue<BytesLike>;
};

export type TransferDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  token: string;
  payload: string;
  partition: string;
  operator: string;
  from: string;
  to: string;
  value: BigNumber;
  tokenId: BigNumber;
  data: string;
  operatorData: string;
};

export interface PauseExtensionInterface extends utils.Interface {
  functions: {
    "extensionDeployer()": FunctionFragment;
    "externalFunctions()": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "interfaceLabel()": FunctionFragment;
    "isTokenStandardSupported(uint8)": FunctionFragment;
    "packageHash()": FunctionFragment;
    "requiredRoles()": FunctionFragment;
    "version()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "initialize()": FunctionFragment;
    "pause()": FunctionFragment;
    "unpause()": FunctionFragment;
    "isPausedFor(address)": FunctionFragment;
    "pauseFor(address)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "unpauseFor(address)": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "onTransferExecuted((address,bytes,bytes32,address,address,address,uint256,uint256,bytes,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "extensionDeployer"
      | "externalFunctions"
      | "hasRole"
      | "interfaceLabel"
      | "isTokenStandardSupported"
      | "packageHash"
      | "requiredRoles"
      | "version"
      | "isPaused"
      | "initialize"
      | "pause"
      | "unpause"
      | "isPausedFor"
      | "pauseFor"
      | "isPauser"
      | "unpauseFor"
      | "addPauser"
      | "removePauser"
      | "renouncePauser"
      | "onTransferExecuted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "extensionDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "interfaceLabel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenStandardSupported",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "packageHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredRoles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPausedFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTransferExecuted",
    values: [TransferDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "extensionDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interfaceLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenStandardSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "packageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPausedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpauseFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTransferExecuted",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "PausedFor(address,address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "RoleAdded(address,bytes32)": EventFragment;
    "RoleRemoved(address,bytes32)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UnpausedFor(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedFor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpausedFor"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  pauser: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PausedForEventObject {
  pauser: string;
  account: string;
}
export type PausedForEvent = TypedEvent<[string, string], PausedForEventObject>;

export type PausedForEventFilter = TypedEventFilter<PausedForEvent>;

export interface PauserAddedEventObject {
  account: string;
}
export type PauserAddedEvent = TypedEvent<[string], PauserAddedEventObject>;

export type PauserAddedEventFilter = TypedEventFilter<PauserAddedEvent>;

export interface PauserRemovedEventObject {
  account: string;
}
export type PauserRemovedEvent = TypedEvent<[string], PauserRemovedEventObject>;

export type PauserRemovedEventFilter = TypedEventFilter<PauserRemovedEvent>;

export interface RoleAddedEventObject {
  caller: string;
  roleId: string;
}
export type RoleAddedEvent = TypedEvent<[string, string], RoleAddedEventObject>;

export type RoleAddedEventFilter = TypedEventFilter<RoleAddedEvent>;

export interface RoleRemovedEventObject {
  caller: string;
  roleId: string;
}
export type RoleRemovedEvent = TypedEvent<
  [string, string],
  RoleRemovedEventObject
>;

export type RoleRemovedEventFilter = TypedEventFilter<RoleRemovedEvent>;

export interface UnpausedEventObject {
  pauser: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnpausedForEventObject {
  pauser: string;
  account: string;
}
export type UnpausedForEvent = TypedEvent<
  [string, string],
  UnpausedForEventObject
>;

export type UnpausedForEventFilter = TypedEventFilter<UnpausedForEvent>;

export interface PauseExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PauseExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<[string[]]>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPausedFor(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pauseFor(
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPauser(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpauseFor(
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Gets the extension deployer address
   */
  extensionDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
   * An array of function signatures registered by the extension
   */
  externalFunctions(overrides?: CallOverrides): Promise<string[]>;

  hasRole(
    caller: PromiseOrValue<string>,
    roleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
   */
  interfaceLabel(overrides?: CallOverrides): Promise<string>;

  /**
   * Checks if token standard is supported by the extension
   * @param standard a valid TokenStandard (enum)
   */
  isTokenStandardSupported(
    standard: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Gets the package hash (generated using the package name and deployer address)
   */
  packageHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the list of required roles required to call the extension
   */
  requiredRoles(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the package version
   */
  version(overrides?: CallOverrides): Promise<BigNumber>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * This function is invoked when the Extension is registered with a TokenProxy
   * This function cannot be invoked directly
   */
  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPausedFor(
    caller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pauseFor(
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPauser(
    caller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpauseFor(
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPauser(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePauser(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onTransferExecuted(
    data: TransferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<string[]>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<string>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    isPausedFor(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pauseFor(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPauser(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpauseFor(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPauser(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePauser(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(
      pauser?: PromiseOrValue<string> | null
    ): PausedEventFilter;
    Paused(pauser?: PromiseOrValue<string> | null): PausedEventFilter;

    "PausedFor(address,address)"(
      pauser?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): PausedForEventFilter;
    PausedFor(
      pauser?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): PausedForEventFilter;

    "PauserAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): PauserAddedEventFilter;
    PauserAdded(
      account?: PromiseOrValue<string> | null
    ): PauserAddedEventFilter;

    "PauserRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): PauserRemovedEventFilter;
    PauserRemoved(
      account?: PromiseOrValue<string> | null
    ): PauserRemovedEventFilter;

    "RoleAdded(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleAddedEventFilter;
    RoleAdded(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleAddedEventFilter;

    "RoleRemoved(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleRemovedEventFilter;
    RoleRemoved(
      caller?: PromiseOrValue<string> | null,
      roleId?: PromiseOrValue<BytesLike> | null
    ): RoleRemovedEventFilter;

    "Unpaused(address)"(
      pauser?: PromiseOrValue<string> | null
    ): UnpausedEventFilter;
    Unpaused(pauser?: PromiseOrValue<string> | null): UnpausedEventFilter;

    "UnpausedFor(address,address)"(
      pauser?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): UnpausedForEventFilter;
    UnpausedFor(
      pauser?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): UnpausedForEventFilter;
  };

  estimateGas: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPausedFor(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseFor(
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPauser(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseFor(
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Gets the extension deployer address
     */
    extensionDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function is used by the TokenProxy to determine what function selectors to add to the TokenProxy
     * An array of function signatures registered by the extension
     */
    externalFunctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(
      caller: PromiseOrValue<string>,
      roleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The ERC1820 interface label the extension will be registered as in the ERC1820 registry
     */
    interfaceLabel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks if token standard is supported by the extension
     * @param standard a valid TokenStandard (enum)
     */
    isTokenStandardSupported(
      standard: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the package hash (generated using the package name and deployer address)
     */
    packageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the list of required roles required to call the extension
     */
    requiredRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the package version
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function is invoked when the Extension is registered with a TokenProxy
     * This function cannot be invoked directly
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPausedFor(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseFor(
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPauser(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseFor(
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onTransferExecuted(
      data: TransferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
