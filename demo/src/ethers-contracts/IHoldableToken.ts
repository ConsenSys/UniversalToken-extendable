/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ERC20HoldDataStruct = {
  sender: PromiseOrValue<string>;
  recipient: PromiseOrValue<string>;
  notary: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  expirationDateTime: PromiseOrValue<BigNumberish>;
  secretHash: PromiseOrValue<BytesLike>;
  status: PromiseOrValue<BigNumberish>;
};

export type ERC20HoldDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  number
] & {
  sender: string;
  recipient: string;
  notary: string;
  amount: BigNumber;
  expirationDateTime: BigNumber;
  secretHash: string;
  status: number;
};

export interface IHoldableTokenInterface extends utils.Interface {
  functions: {
    "hold(bytes32,address,address,uint256,uint256,bytes32)": FunctionFragment;
    "retrieveHoldData(bytes32)": FunctionFragment;
    "executeHold(bytes32,bytes32)": FunctionFragment;
    "executeHold(bytes32,bytes32,address)": FunctionFragment;
    "executeHold(bytes32)": FunctionFragment;
    "releaseHold(bytes32)": FunctionFragment;
    "balanceOnHold(address)": FunctionFragment;
    "spendableBalanceOf(address)": FunctionFragment;
    "totalSupplyOnHold()": FunctionFragment;
    "holdStatus(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hold"
      | "retrieveHoldData"
      | "executeHold(bytes32,bytes32)"
      | "executeHold(bytes32,bytes32,address)"
      | "executeHold(bytes32)"
      | "releaseHold"
      | "balanceOnHold"
      | "spendableBalanceOf"
      | "totalSupplyOnHold"
      | "holdStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hold",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32,bytes32,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHold",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOnHold",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holdStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdStatus", data: BytesLike): Result;

  events: {
    "ExecutedHold(bytes32,bytes32,address)": EventFragment;
    "NewHold(bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
    "ReleaseHold(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutedHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseHold"): EventFragment;
}

export interface ExecutedHoldEventObject {
  holdId: string;
  lockPreimage: string;
  recipient: string;
}
export type ExecutedHoldEvent = TypedEvent<
  [string, string, string],
  ExecutedHoldEventObject
>;

export type ExecutedHoldEventFilter = TypedEventFilter<ExecutedHoldEvent>;

export interface NewHoldEventObject {
  holdId: string;
  recipient: string;
  notary: string;
  amount: BigNumber;
  expirationDateTime: BigNumber;
  lockHash: string;
}
export type NewHoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  NewHoldEventObject
>;

export type NewHoldEventFilter = TypedEventFilter<NewHoldEvent>;

export interface ReleaseHoldEventObject {
  holdId: string;
  sender: string;
}
export type ReleaseHoldEvent = TypedEvent<
  [string, string],
  ReleaseHoldEventObject
>;

export type ReleaseHoldEventFilter = TypedEventFilter<ReleaseHoldEvent>;

export interface IHoldableToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHoldableTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ERC20HoldDataStructOutput]>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  /**
   * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
   * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
   * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
   * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
   * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
   * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
   */
  hold(
    holdId: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    notary: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expirationDateTime: PromiseOrValue<BigNumberish>,
    lockHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveHoldData(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ERC20HoldDataStructOutput>;

  /**
   * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
   * @param holdId a unique identifier for the hold.
   * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
   */
  "executeHold(bytes32,bytes32)"(
    holdId: PromiseOrValue<BytesLike>,
    lockPreimage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
   * @param holdId a unique identifier for the hold.
   * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
   * @param recipient the account the tokens will be transferred to on execution.
   */
  "executeHold(bytes32,bytes32,address)"(
    holdId: PromiseOrValue<BytesLike>,
    lockPreimage: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
   * @param holdId a unique identifier for the hold.
   */
  "executeHold(bytes32)"(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
   * @param holdId a unique identifier for the hold.
   */
  releaseHold(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Amount of tokens owned by an account that are held pending execution or release.
   * @param account owner of the tokens
   */
  balanceOnHold(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Total amount of tokens owned by an account including all the held tokens pending execution or release.
   * @param account owner of the tokens
   */
  spendableBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * @param holdId a unique identifier for the hold.
   */
  holdStatus(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ERC20HoldDataStructOutput>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "ExecutedHold(bytes32,bytes32,address)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;
    ExecutedHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;

    "NewHold(bytes32,address,address,uint256,uint256,bytes32)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      notary?: PromiseOrValue<string> | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;
    NewHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      notary?: PromiseOrValue<string> | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;

    "ReleaseHold(bytes32,address)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      sender?: null
    ): ReleaseHoldEventFilter;
    ReleaseHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      sender?: null
    ): ReleaseHoldEventFilter;
  };

  estimateGas: {
    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Called by the sender to hold some tokens for a recipient that the sender can not release back to themself until after the expiration date.
     * @param amount of tokens to be transferred to the recipient on execution. Must be a non zero amount.
     * @param expirationDateTime UNIX epoch seconds the held amount can be released back to the sender by the sender. Past dates are allowed.
     * @param lockHash optional keccak256 hash of a lock preimage. An empty hash will not enforce the hash lock when the hold is executed.
     * @param notary account that can execute the hold. Typically the recipient but can be a third party or a smart contact.
     * @param recipient optional account the tokens will be transferred to on execution. If a zero address, the recipient must be specified on execution of the hold.
     */
    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient that was set at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     */
    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the recipient if no recipient was specified at the hold.
     * @param holdId a unique identifier for the hold.
     * @param lockPreimage the image used to generate the lock hash with a keccak256 hash
     * @param recipient the account the tokens will be transferred to on execution.
     */
    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary to transfer the held tokens to the set at the hold recipient if there is no hash lock.
     * @param holdId a unique identifier for the hold.
     */
    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the notary at any time or the sender after the expiration date to release the held tokens back to the sender.
     * @param holdId a unique identifier for the hold.
     */
    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Amount of tokens owned by an account that are held pending execution or release.
     * @param account owner of the tokens
     */
    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Total amount of tokens owned by an account including all the held tokens pending execution or release.
     * @param account owner of the tokens
     */
    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @param holdId a unique identifier for the hold.
     */
    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
